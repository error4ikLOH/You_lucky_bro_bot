from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
class StateMachine(Enum):
    START = "start"
    SHOP = "shop"
    BUY_ITEM = "buy_item"

# –ö–æ–º–∞–Ω–¥–∞ !—è
@dp.message_handler(commands=['—è'])
async def start_game(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_balance = 100  # –ü–æ –¥–µ—Ñ–æ–ª—Ç—É 100 –≥—Ä–Ω (–∞–±–æ —Ä—É–± –∞–±–æ –¥–æ–ª–∞—Ä—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —ñ–≥—Ä–æ–∫–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö –≤ –¥–µ—è–∫–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.answer(f"–í–∞—à–µ —ñ–º'—è: {message.from_user.username}\n"
                         f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –≥—Ä–Ω\n"
                         f"–í–∞—à—ñ –ø—Ä–µ–¥–º–µ—Ç–∏: {', '.join(user_items)}", reply_markup=main_menu_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
@dp.callback_query_handler(lambda query: query.data.startswith('shop'))
async def show_shop_items(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
    items = [("–º–µ–¥–≤–µ–¥–∏–∫üêª", 75), ("—è—Ö—Ç–∞üõ•Ô∏è", 100), ("–±—É–¥–∏–Ω–æ–∫üè°", 50)]

    markup = InlineKeyboardMarkup(row_width=2)
    for item_name, item_price in items:
        markup.add(InlineKeyboardButton(f"{item_name} ({item_price} –≥—Ä–Ω)", callback_data=f"buy_item_{item_name}"))

    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))

    await query.message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:", reply_markup=markup)
    await StateMachine.SHOP.set()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
@dp.callback_query_handler(lambda query: query.data.startswith('buy_item'), state=StateMachine.SHOP)
async def buy_item(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()

    item_name = query.data.split('_')[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ data
    item_price = get_item_price(item_name)  # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞

    user_balance = get_user_balance(query.from_user.id)  # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ —ñ–Ω—à–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞

    if user_balance >= item_price:
        # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ —Ü—ñ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        new_balance = user_balance - item_price
        update_user_balance(query.from_user.id, new_balance)  # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

        # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        add_item_to_user(query.from_user.id, item_name)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

        await query.message.answer(f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ {item_name} –∑–∞ {item_price} –≥—Ä–Ω.")
    else:
        await query.message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")

    await StateMachine.START.set()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–∞–≥–∞–∑–∏–Ω—ñ –∞–±–æ —ñ–Ω—à–∏—Ö –º–µ–Ω—é
@dp.callback_query_handler(lambda query: query.data == 'back_to_main_menu', state=[StateMachine.SHOP, StateMachine.BUY_ITEM])
async def back_to_main_menu(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()
    await StateMachine.START.set()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
    await start_game(query.message, state)
  
